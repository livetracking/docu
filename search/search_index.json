{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Live Tracking With this open source live tracking software you can record and analyze data in real time . You have full control over the data, because the software runs on your own server. You are able to track your time elapsed, distance, speed and elevation in real time. And if you have any ANT+ or Bluetooth sensors, this data can also be transmitted. Optimized for easy use. Input With the Android app IpBike you can transfer your data in real time. Deposit your access data in Settings > Upload settings > Custom livetracking settings . The app supports ANT+ and Bluetooth sensors. You can transfer your speed, heart rate, cadence and power as well as the GPS coordinates. Output This software is very much based on InfluxDB . So you have all the advantages of a very fast time series database . It aims to answer queries in real-time. Each user comes with his own InfluxDB database for live tracking. Only you as an owner can write to the database. Currently you can save 8 hours of data. Your profile is always public, your friends can view your data at the following URL: https://your-domain.local/watch/YOUR-USERNAME (Click the image to watch a demo video) Because you have your own InfluxDB database, you can also use other evaluation programs. A popular program is e.g. Grafana . Use the URL https://your-domain.local and the database name YOUR-USERNAME . Features Built-in HTTP API so you don't have to write any server side code to get up and running. SQL-like query language. Get data fast in and out. It aims to answer queries in real-time. That means every data point is indexed as it comes in and is immediately available in queries that should return in < 100ms. Requirements PHP 7 and Composer Lighttpd or another web server InfluxDB SQLite Developers Welcome You can use this software as the back end for live tracking. It is very easy to integrate into existing apps. The back end is coded in PHP. Data is stored in a SQLite and InfuxDB database. The transfer is done via an HTTP API. You will find more details in the API documentation .","title":"About"},{"location":"index.html#live-tracking","text":"With this open source live tracking software you can record and analyze data in real time . You have full control over the data, because the software runs on your own server. You are able to track your time elapsed, distance, speed and elevation in real time. And if you have any ANT+ or Bluetooth sensors, this data can also be transmitted. Optimized for easy use.","title":"Live Tracking"},{"location":"index.html#input","text":"With the Android app IpBike you can transfer your data in real time. Deposit your access data in Settings > Upload settings > Custom livetracking settings . The app supports ANT+ and Bluetooth sensors. You can transfer your speed, heart rate, cadence and power as well as the GPS coordinates.","title":"Input"},{"location":"index.html#output","text":"This software is very much based on InfluxDB . So you have all the advantages of a very fast time series database . It aims to answer queries in real-time. Each user comes with his own InfluxDB database for live tracking. Only you as an owner can write to the database. Currently you can save 8 hours of data. Your profile is always public, your friends can view your data at the following URL: https://your-domain.local/watch/YOUR-USERNAME (Click the image to watch a demo video) Because you have your own InfluxDB database, you can also use other evaluation programs. A popular program is e.g. Grafana . Use the URL https://your-domain.local and the database name YOUR-USERNAME .","title":"Output"},{"location":"index.html#features","text":"Built-in HTTP API so you don't have to write any server side code to get up and running. SQL-like query language. Get data fast in and out. It aims to answer queries in real-time. That means every data point is indexed as it comes in and is immediately available in queries that should return in < 100ms.","title":"Features"},{"location":"index.html#requirements","text":"PHP 7 and Composer Lighttpd or another web server InfluxDB SQLite","title":"Requirements"},{"location":"index.html#developers-welcome","text":"You can use this software as the back end for live tracking. It is very easy to integrate into existing apps. The back end is coded in PHP. Data is stored in a SQLite and InfuxDB database. The transfer is done via an HTTP API. You will find more details in the API documentation .","title":"Developers Welcome"},{"location":"Change-Password.html","text":"Change Password [POST] /user/change-password Parameters password new_password Example: curl -u blafa:test1234 \\ --data \"password=test1234\" \\ --data \"new_password=TEST1234\" \\ \"https://your-domain.local/user/change-password\" Response OK: status OK Errors: errors INVALIDATE_PASSWORD INVALIDATE_NEW_PASSWORD","title":"Change Password"},{"location":"Change-Password.html#change-password","text":"","title":"Change Password"},{"location":"Change-Password.html#post-userchange-password","text":"","title":"[POST] /user/change-password"},{"location":"Change-Password.html#parameters","text":"password new_password Example: curl -u blafa:test1234 \\ --data \"password=test1234\" \\ --data \"new_password=TEST1234\" \\ \"https://your-domain.local/user/change-password\"","title":"Parameters"},{"location":"Change-Password.html#response","text":"OK: status OK Errors: errors INVALIDATE_PASSWORD INVALIDATE_NEW_PASSWORD","title":"Response"},{"location":"Create-User-Register.html","text":"Create New User [POST] /register Parameters username email password Example: curl --data \"username=TEST\" \\ --data \"password=test1234\" https://your-domain.local/register Response OK: status OK username Username id User-ID Example: { \"status\": \"OK\", \"id\": \"9\", \"username\": \"test\" } Errors: errors USERNAME_DOUBLE INVALIDATE_USERNAME INVALIDATE_PASSWORD Example: { \"errors\": [ \"USERNAME_DOUBLE\", \"INVALIDATE_PASSWORD\" ] }","title":"Create User (Register)"},{"location":"Create-User-Register.html#create-new-user","text":"","title":"Create New User"},{"location":"Create-User-Register.html#post-register","text":"","title":"[POST] /register"},{"location":"Create-User-Register.html#parameters","text":"username email password Example: curl --data \"username=TEST\" \\ --data \"password=test1234\" https://your-domain.local/register","title":"Parameters"},{"location":"Create-User-Register.html#response","text":"OK: status OK username Username id User-ID Example: { \"status\": \"OK\", \"id\": \"9\", \"username\": \"test\" } Errors: errors USERNAME_DOUBLE INVALIDATE_USERNAME INVALIDATE_PASSWORD Example: { \"errors\": [ \"USERNAME_DOUBLE\", \"INVALIDATE_PASSWORD\" ] }","title":"Response"},{"location":"Delete-User.html","text":"Delete User Delete the user and all its data. [DELETE] /user Parameters password Example: curl -u test:test1234 -X DELETE \\ --data \"password=test1234\" \\ \"https://your-domain.local/user\" Response OK: status OK Errors: errors INVALIDATE_PASSWORD","title":"Delete User"},{"location":"Delete-User.html#delete-user","text":"Delete the user and all its data.","title":"Delete User"},{"location":"Delete-User.html#delete-user_1","text":"","title":"[DELETE] /user"},{"location":"Delete-User.html#parameters","text":"password Example: curl -u test:test1234 -X DELETE \\ --data \"password=test1234\" \\ \"https://your-domain.local/user\"","title":"Parameters"},{"location":"Delete-User.html#response","text":"OK: status OK Errors: errors INVALIDATE_PASSWORD","title":"Response"},{"location":"Get-User-Data.html","text":"Get User Data [GET] /user[/{username}] Examples: Current user (own user): curl -u test:test1234 \"https://your-domain.local/user\" Other user: curl -u test:test1234 \"https://your-domain.local/user/nils\" Response OK: user id username Errors: errors USERNAME_NOT_FOUND INVALIDATE_USERNAME","title":"Get User Data"},{"location":"Get-User-Data.html#get-user-data","text":"","title":"Get User Data"},{"location":"Get-User-Data.html#get-userusername","text":"Examples: Current user (own user): curl -u test:test1234 \"https://your-domain.local/user\" Other user: curl -u test:test1234 \"https://your-domain.local/user/nils\"","title":"[GET] /user[/{username}]"},{"location":"Get-User-Data.html#response","text":"OK: user id username Errors: errors USERNAME_NOT_FOUND INVALIDATE_USERNAME","title":"Response"},{"location":"Get-User-List.html","text":"Get User List [GET] /users Examples: curl \"https://your-domain.local/users\" Response OK: users id username","title":"Get User List"},{"location":"Get-User-List.html#get-user-list","text":"","title":"Get User List"},{"location":"Get-User-List.html#get-users","text":"Examples: curl \"https://your-domain.local/users\"","title":"[GET] /users"},{"location":"Get-User-List.html#response","text":"OK: users id username","title":"Response"},{"location":"Getting-started.html","text":"API This describes the resources that make up the Live Tracking HTTP API. Schema All API access is over HTTPS, and accessed from the https://your-domain.local . All data is sent as JSON. If you installed the back end software on your own server, of course, the URL changes. Parameters Many API methods take parameters. Which parameters are expected exactly will be described in detail: New User: Create User (Register) User Data: Get User List Get User Data Edit User: Change Password Delete User Live Tracking: Writing Data Querying Data Authentication There is only one way to authenticate through livetracking.io API: HTTP Basic authentication (BA) You can find more details in Wikipedia . Requests that require authentication will return 401 Unauthorized . If the login failed 403 Forbidden is returned. Without username and password: curl -i https://your-domain.local/user HTTP/1.1 401 Unauthorized { \"error\": \"AUTHENTICATION_FAILED\" } With username and password: curl -i https://your-domain.local/user -u foo:bar12345 HTTP/1.1 403 Forbidden { \"error\": \"AUTHENTICATION_FAILED\" } OK If your request received HTTP status code 200 or 204 , it was a success! Errors There are three possible types of errors on API calls. Each type of error has its own HTTP status code. Depending on the type of error, further details are output. HTTP Status Code: 400 , 404 and 405 : Client error 401 and 403 : Authentication error 500 : The system is overloaded or significantly impaired For status code 400 , object errors is return with an array of error codes. curl --data \"username=test\" https://your-domain.local/register HTTP/1.1 400 Bad Request { \"errors\": [ \"INVALIDATE_PASSWORD\", ] } Error Codes (Detail): USERNAME_DOUBLE : The username is already used. INVALIDATE_USERNAME : The username is not valid. It must be at least 4 characters and can be up to 20 characters long. It can only contain characters (a-z) and numbers. INVALIDATE_PASSWORD : The entered password is invalid. The password must be at least 8 characters long. INVALIDATE_NEW_PASSWORD : The entered new password is invalid. The password must be at least 8 characters long.' USERNAME_NOT_FOUND : Username could not be found. SELF_TALK : Self talk? FORBIDDEN : The entered password is not correct. Cross Origin Resource Sharing The API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the CORS W3C Recommendation , or this Wikipedia article .","title":"Getting started"},{"location":"Getting-started.html#api","text":"This describes the resources that make up the Live Tracking HTTP API.","title":"API"},{"location":"Getting-started.html#schema","text":"All API access is over HTTPS, and accessed from the https://your-domain.local . All data is sent as JSON. If you installed the back end software on your own server, of course, the URL changes.","title":"Schema"},{"location":"Getting-started.html#parameters","text":"Many API methods take parameters. Which parameters are expected exactly will be described in detail: New User: Create User (Register) User Data: Get User List Get User Data Edit User: Change Password Delete User Live Tracking: Writing Data Querying Data","title":"Parameters"},{"location":"Getting-started.html#authentication","text":"There is only one way to authenticate through livetracking.io API: HTTP Basic authentication (BA) You can find more details in Wikipedia . Requests that require authentication will return 401 Unauthorized . If the login failed 403 Forbidden is returned. Without username and password: curl -i https://your-domain.local/user HTTP/1.1 401 Unauthorized { \"error\": \"AUTHENTICATION_FAILED\" } With username and password: curl -i https://your-domain.local/user -u foo:bar12345 HTTP/1.1 403 Forbidden { \"error\": \"AUTHENTICATION_FAILED\" }","title":"Authentication"},{"location":"Getting-started.html#ok","text":"If your request received HTTP status code 200 or 204 , it was a success!","title":"OK"},{"location":"Getting-started.html#errors","text":"There are three possible types of errors on API calls. Each type of error has its own HTTP status code. Depending on the type of error, further details are output. HTTP Status Code: 400 , 404 and 405 : Client error 401 and 403 : Authentication error 500 : The system is overloaded or significantly impaired For status code 400 , object errors is return with an array of error codes. curl --data \"username=test\" https://your-domain.local/register HTTP/1.1 400 Bad Request { \"errors\": [ \"INVALIDATE_PASSWORD\", ] } Error Codes (Detail): USERNAME_DOUBLE : The username is already used. INVALIDATE_USERNAME : The username is not valid. It must be at least 4 characters and can be up to 20 characters long. It can only contain characters (a-z) and numbers. INVALIDATE_PASSWORD : The entered password is invalid. The password must be at least 8 characters long. INVALIDATE_NEW_PASSWORD : The entered new password is invalid. The password must be at least 8 characters long.' USERNAME_NOT_FOUND : Username could not be found. SELF_TALK : Self talk? FORBIDDEN : The entered password is not correct.","title":"Errors"},{"location":"Getting-started.html#cross-origin-resource-sharing","text":"The API supports Cross Origin Resource Sharing (CORS) for AJAX requests from any origin. You can read the CORS W3C Recommendation , or this Wikipedia article .","title":"Cross Origin Resource Sharing"},{"location":"Imprint.html","text":"Imprint \ud83c\udde9\ud83c\uddea German law demands this. Nils Knieling Klabundeweg 14 22359 Hamburg Germany Email: nils [at] nkn-it (dot) de Phone: + 49 (0) 40 2282 1390 (no support) Umsatzsteuer-ID gem\u00e4\u00df \u00a727 a Umsatzsteuergesetz (VAT ID Number Germany): DE 279463785","title":"Imprint"},{"location":"Imprint.html#imprint","text":"\ud83c\udde9\ud83c\uddea German law demands this. Nils Knieling Klabundeweg 14 22359 Hamburg Germany Email: nils [at] nkn-it (dot) de Phone: + 49 (0) 40 2282 1390 (no support) Umsatzsteuer-ID gem\u00e4\u00df \u00a727 a Umsatzsteuergesetz (VAT ID Number Germany): DE 279463785","title":"Imprint"},{"location":"Install.html","text":"Installation Requirements PHP 7 and Composer Lighttpd or another web server InfluxDB SQLite For many distributions, there are pre-packaged packages. Ubuntu Install InfluxDB with the following commands: wget https://dl.influxdata.com/influxdb/releases/influxdb_1.7.10_amd64.deb sudo dpkg -i influxdb_1.7.10_amd64.deb More help: https://portal.influxdata.com/downloads/ Install packages: sudo apt update sudo apt install git curl php-cli php-sqlite3 php-mbstring phpunit sqlite3 zip unzip Install Composer: php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" sudo php composer-setup.php --install-dir=/usr/bin --filename=composer php -r \"unlink('composer-setup.php');\" Installation # Clone this repository git clone \"https://github.com/livetracking/server.git\" cd server # Install dependencies composer install # Create SQLite database cat database/users.sql | sqlite3 database/users.sqlite # Create default users php database/default_users.php | sqlite3 database/users.sqlite # Create InfluxDB default users and databases bash database/influxdb.sh # Edit setting, set InfluxDB username and password vi src/settings.php # Edit InfluxDB configuration # Enable authentication by setting the 'auth-enabled' option to 'true' sudo vi /etc/influxdb/influxdb.conf # Restart InfluxDB sudo systemctl restart influxdb Test Start the Application You can then run it with PHP's built-in webserver: php -S 127.0.0.1:8080 -t public public/index.php # or run bash start.sh Test your setup: # Adjust variables vi test/test.sh # Run bash test/test.sh Insert some data Register new user: curl \"http://127.0.0.1:8080/register\" \\ --data \"username=my_username\" \\ --data \"password=my_password\" Write data into InfluxDB: curl -u \"my_username:my_password\" \"http://127.0.0.1:8086/write?db=my_username\" \\ --data \"test value=1\" Query for the data Show user: curl -u \"my_username:my_password\" \"http://127.0.0.1:8080/user\" Query data from InfluxDB: curl -u \"public:livetracking\" \"http://127.0.0.1:8086/query?db=my_username\" \\ --data \"q=SELECT * FROM test\" Deploy If you want to publish your setup on the internet you should use a proper web server. A Lighttpd configuration ( lighttpd.conf ) can be found in the folder server . Lighttpd is also used as a reverse proxy for InfluxDB. Run Phing build script: vi build.xml sudo bash deploy.sh","title":"Installation"},{"location":"Install.html#installation","text":"","title":"Installation"},{"location":"Install.html#requirements","text":"PHP 7 and Composer Lighttpd or another web server InfluxDB SQLite For many distributions, there are pre-packaged packages.","title":"Requirements"},{"location":"Install.html#ubuntu","text":"Install InfluxDB with the following commands: wget https://dl.influxdata.com/influxdb/releases/influxdb_1.7.10_amd64.deb sudo dpkg -i influxdb_1.7.10_amd64.deb More help: https://portal.influxdata.com/downloads/ Install packages: sudo apt update sudo apt install git curl php-cli php-sqlite3 php-mbstring phpunit sqlite3 zip unzip Install Composer: php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\" sudo php composer-setup.php --install-dir=/usr/bin --filename=composer php -r \"unlink('composer-setup.php');\"","title":"Ubuntu"},{"location":"Install.html#installation_1","text":"# Clone this repository git clone \"https://github.com/livetracking/server.git\" cd server # Install dependencies composer install # Create SQLite database cat database/users.sql | sqlite3 database/users.sqlite # Create default users php database/default_users.php | sqlite3 database/users.sqlite # Create InfluxDB default users and databases bash database/influxdb.sh # Edit setting, set InfluxDB username and password vi src/settings.php # Edit InfluxDB configuration # Enable authentication by setting the 'auth-enabled' option to 'true' sudo vi /etc/influxdb/influxdb.conf # Restart InfluxDB sudo systemctl restart influxdb","title":"Installation"},{"location":"Install.html#test","text":"","title":"Test"},{"location":"Install.html#start-the-application","text":"You can then run it with PHP's built-in webserver: php -S 127.0.0.1:8080 -t public public/index.php # or run bash start.sh Test your setup: # Adjust variables vi test/test.sh # Run bash test/test.sh","title":"Start the Application"},{"location":"Install.html#insert-some-data","text":"Register new user: curl \"http://127.0.0.1:8080/register\" \\ --data \"username=my_username\" \\ --data \"password=my_password\" Write data into InfluxDB: curl -u \"my_username:my_password\" \"http://127.0.0.1:8086/write?db=my_username\" \\ --data \"test value=1\"","title":"Insert some data"},{"location":"Install.html#query-for-the-data","text":"Show user: curl -u \"my_username:my_password\" \"http://127.0.0.1:8080/user\" Query data from InfluxDB: curl -u \"public:livetracking\" \"http://127.0.0.1:8086/query?db=my_username\" \\ --data \"q=SELECT * FROM test\"","title":"Query for the data"},{"location":"Install.html#deploy","text":"If you want to publish your setup on the internet you should use a proper web server. A Lighttpd configuration ( lighttpd.conf ) can be found in the folder server . Lighttpd is also used as a reverse proxy for InfluxDB. Run Phing build script: vi build.xml sudo bash deploy.sh","title":"Deploy"},{"location":"Querying-Data.html","text":"Querying Data (Live Tracking) To perform a query send a GET request to the https://your-domain.local/query endpoint, set the URL parameter db as the target database, and set the URL parameter q as your query. livetracking.io is based on the time series database InfluxDB . Each user comes with their own database. The database name is the same as the user name. If you want to learn more about the InfluxDB HTTP API, you can read the official documentation . [GET] /query The example below uses the HTTP API to query the same database that you encountered in Writing Data . The user public with password livetracking always has read access to all data. curl -u \"public:livetracking\" -G 'https://your-domain.local/query?db=test' \\ --data-urlencode 'q=SELECT * FROM samples' InfluxDB returns JSON. The results of your query appear in the \"results\" array. If an error occurs, InfluxDB sets an \"error\" key with an explanation of the error. Query String Parameters db=database Required! The database name is the username. q=query Required! Syntax: SELECT <field_key>[,<field_key>] FROM <measurement_name> [WHERE_clause] Always use the measurement name: samples Note the spaces and comma. Field keys are the same as when writing data . A detailed description of the syntax used can be found in the InfluxDB Help . Example to see data from the last 10 minutes: SELECT * FROM samples WHERE time > now() - 10m epoch=[h,m,s,ms,u,ns] Optional. Everything is stored and reported in UTC. By default, timestamps are returned in RFC3339 UTC and have nanosecond precision , for example 2016-08-12T20:15:14.318570484Z . If you want timestamps in Unix epoch format include in your request the query string parameter epoch . ns = nanoseconds u = microsecond ms = milliseconds s = seconds (A good precision for live tracking) m = minutes h = hours For example, get epoch in seconds with: curl -u \"public:livetracking\" -G 'https://your-domain.local/query' \\ --data-urlencode 'db=test' --data-urlencode 'epoch=s' --data-urlencode 'q=SELECT * FROM samples' Examples JavaScript An example to display the data on a web page can be found at this link: https://github.com/livetracking/docu/blob/master/examples/javascript.html","title":"Querying Data"},{"location":"Querying-Data.html#querying-data-live-tracking","text":"To perform a query send a GET request to the https://your-domain.local/query endpoint, set the URL parameter db as the target database, and set the URL parameter q as your query. livetracking.io is based on the time series database InfluxDB . Each user comes with their own database. The database name is the same as the user name. If you want to learn more about the InfluxDB HTTP API, you can read the official documentation .","title":"Querying Data (Live Tracking)"},{"location":"Querying-Data.html#get-query","text":"The example below uses the HTTP API to query the same database that you encountered in Writing Data . The user public with password livetracking always has read access to all data. curl -u \"public:livetracking\" -G 'https://your-domain.local/query?db=test' \\ --data-urlencode 'q=SELECT * FROM samples' InfluxDB returns JSON. The results of your query appear in the \"results\" array. If an error occurs, InfluxDB sets an \"error\" key with an explanation of the error.","title":"[GET] /query"},{"location":"Querying-Data.html#query-string-parameters","text":"","title":"Query String Parameters"},{"location":"Querying-Data.html#dbdatabase","text":"Required! The database name is the username.","title":"db=database"},{"location":"Querying-Data.html#qquery","text":"Required! Syntax: SELECT <field_key>[,<field_key>] FROM <measurement_name> [WHERE_clause] Always use the measurement name: samples Note the spaces and comma. Field keys are the same as when writing data . A detailed description of the syntax used can be found in the InfluxDB Help . Example to see data from the last 10 minutes: SELECT * FROM samples WHERE time > now() - 10m","title":"q=query"},{"location":"Querying-Data.html#epochhmsmsuns","text":"Optional. Everything is stored and reported in UTC. By default, timestamps are returned in RFC3339 UTC and have nanosecond precision , for example 2016-08-12T20:15:14.318570484Z . If you want timestamps in Unix epoch format include in your request the query string parameter epoch . ns = nanoseconds u = microsecond ms = milliseconds s = seconds (A good precision for live tracking) m = minutes h = hours For example, get epoch in seconds with: curl -u \"public:livetracking\" -G 'https://your-domain.local/query' \\ --data-urlencode 'db=test' --data-urlencode 'epoch=s' --data-urlencode 'q=SELECT * FROM samples'","title":"epoch=[h,m,s,ms,u,ns]"},{"location":"Querying-Data.html#examples","text":"","title":"Examples"},{"location":"Querying-Data.html#javascript","text":"An example to display the data on a web page can be found at this link: https://github.com/livetracking/docu/blob/master/examples/javascript.html","title":"JavaScript"},{"location":"Writing-Data.html","text":"Writing Data (Live Tracking) The HTTP API is the primary means of writing data, by sending POST requests to https://your-domain.local/write . livetracking.io is based on the time series database InfluxDB . Each user comes with their own database. Only the user can write to his own database. The database name is the same as the user name. If you want to learn more about the InfluxDB HTTP API, you can read the official documentation . [POST] /write When writing points, you must specify an existing database in the db query parameter. The database name is the username. The example below writes a single point to the test database. The data consist of the measurement samples , the field key value with a field hr_bpm of 145 , and the timestamp in nanoseconds 1434055562000000000 . curl -u \"test:test1234\" \"https://your-domain.local/write?db=test\" \\ --data-binary 'samples hr_bpm=145 1434055562000000000' The body of the POST - InfluxDB call this the Line Protocol - contains the time-series data that you wish to store. InfluxDB requires a measurement name. Always use the name: samples Field keys are required and are always strings, and, by default, field values are floats. The timestamp - supplied at the end of the line in Unix time in nanoseconds since January 1, 1970 UTC - is optional. If you do not specify a timestamp the server\u2019s local nanosecond timestamp in Unix epoch is used. Anything that has to do with time is always UTC. They can adjust the precision by parameter. Query String Parameters db=database Required! The database name is the username. precision=[ns,u,ms,s,m,h] Optional. Sets the precision for the supplied Unix time values. The HTTP API assumes that timestamps are in nanoseconds if you do not specify precision. ns = nanoseconds u = microsecond ms = milliseconds s = seconds (A good precision for live tracking) m = minutes h = hours Examples: Write a point to the database test with a timestamp in nanoseconds (default): curl -u \"test:test1234\" 'https://your-domain.local/write?db=test' \\ --data-binary 'samples hr_bpm=145 1465934559000000000' Write a point to the database test with a timestamp in seconds: curl -u \"test:test1234\" 'https://your-domain.local/write?db=test&precision=s' \\ --data-binary 'samples hr_bpm=145 1463683075' Syntax <measurement> <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>] Always use the measurement name: samples Note the spaces and comma. The fields are explained in the following. Field Keys If you missed something, please contact me. dur_s Duration in seconds. dist_km Distance in kilometers. lat Latitude in decimal degrees (DD). lng Longitude in decimal degrees (DD). acc_m GPS accuracy in meters. bearing Bearing in degrees. battery Charging state of the battery. Indication in percent. gsm_signal GSM radio signal in percent. temp_c Temperature in degrees Celsius. spd_kph Speed in kilometers per hour. alt_m Altitude / Elevation in meters. hr_bpm Heart rate beats per minute. cad_rpm Cadence in revolutions per minute. pwr_w Power in watts. pwr_w_l Power of the left leg in watts. pwr_w_r Power of the right leg in watts. Writing multiple samples Post multiple samples at the same time by separating each sample with a new line. Examples: curl -u \"test:test1234\" 'https://your-domain.local/write?db=test&precision=s' \\ --data-binary 'samples hr_bpm=123,pwr_w=1234 1463683075 samples hr_bpm=111,pwr_w=999 1463683076 samples hr_bpm=99,pwr_w=456 1463683080'","title":"Writing Data"},{"location":"Writing-Data.html#writing-data-live-tracking","text":"The HTTP API is the primary means of writing data, by sending POST requests to https://your-domain.local/write . livetracking.io is based on the time series database InfluxDB . Each user comes with their own database. Only the user can write to his own database. The database name is the same as the user name. If you want to learn more about the InfluxDB HTTP API, you can read the official documentation .","title":"Writing Data (Live Tracking)"},{"location":"Writing-Data.html#post-write","text":"When writing points, you must specify an existing database in the db query parameter. The database name is the username. The example below writes a single point to the test database. The data consist of the measurement samples , the field key value with a field hr_bpm of 145 , and the timestamp in nanoseconds 1434055562000000000 . curl -u \"test:test1234\" \"https://your-domain.local/write?db=test\" \\ --data-binary 'samples hr_bpm=145 1434055562000000000' The body of the POST - InfluxDB call this the Line Protocol - contains the time-series data that you wish to store. InfluxDB requires a measurement name. Always use the name: samples Field keys are required and are always strings, and, by default, field values are floats. The timestamp - supplied at the end of the line in Unix time in nanoseconds since January 1, 1970 UTC - is optional. If you do not specify a timestamp the server\u2019s local nanosecond timestamp in Unix epoch is used. Anything that has to do with time is always UTC. They can adjust the precision by parameter.","title":"[POST] /write"},{"location":"Writing-Data.html#query-string-parameters","text":"","title":"Query String Parameters"},{"location":"Writing-Data.html#dbdatabase","text":"Required! The database name is the username.","title":"db=database"},{"location":"Writing-Data.html#precisionnsumssmh","text":"Optional. Sets the precision for the supplied Unix time values. The HTTP API assumes that timestamps are in nanoseconds if you do not specify precision. ns = nanoseconds u = microsecond ms = milliseconds s = seconds (A good precision for live tracking) m = minutes h = hours Examples: Write a point to the database test with a timestamp in nanoseconds (default): curl -u \"test:test1234\" 'https://your-domain.local/write?db=test' \\ --data-binary 'samples hr_bpm=145 1465934559000000000' Write a point to the database test with a timestamp in seconds: curl -u \"test:test1234\" 'https://your-domain.local/write?db=test&precision=s' \\ --data-binary 'samples hr_bpm=145 1463683075'","title":"precision=[ns,u,ms,s,m,h]"},{"location":"Writing-Data.html#syntax","text":"<measurement> <field_key>=<field_value>[,<field_key>=<field_value>] [<timestamp>] Always use the measurement name: samples Note the spaces and comma. The fields are explained in the following.","title":"Syntax"},{"location":"Writing-Data.html#field-keys","text":"If you missed something, please contact me.","title":"Field Keys"},{"location":"Writing-Data.html#dur_s","text":"Duration in seconds.","title":"dur_s"},{"location":"Writing-Data.html#dist_km","text":"Distance in kilometers.","title":"dist_km"},{"location":"Writing-Data.html#lat","text":"Latitude in decimal degrees (DD).","title":"lat"},{"location":"Writing-Data.html#lng","text":"Longitude in decimal degrees (DD).","title":"lng"},{"location":"Writing-Data.html#acc_m","text":"GPS accuracy in meters.","title":"acc_m"},{"location":"Writing-Data.html#bearing","text":"Bearing in degrees.","title":"bearing"},{"location":"Writing-Data.html#battery","text":"Charging state of the battery. Indication in percent.","title":"battery"},{"location":"Writing-Data.html#gsm_signal","text":"GSM radio signal in percent.","title":"gsm_signal"},{"location":"Writing-Data.html#temp_c","text":"Temperature in degrees Celsius.","title":"temp_c"},{"location":"Writing-Data.html#spd_kph","text":"Speed in kilometers per hour.","title":"spd_kph"},{"location":"Writing-Data.html#alt_m","text":"Altitude / Elevation in meters.","title":"alt_m"},{"location":"Writing-Data.html#hr_bpm","text":"Heart rate beats per minute.","title":"hr_bpm"},{"location":"Writing-Data.html#cad_rpm","text":"Cadence in revolutions per minute.","title":"cad_rpm"},{"location":"Writing-Data.html#pwr_w","text":"Power in watts.","title":"pwr_w"},{"location":"Writing-Data.html#pwr_w_l","text":"Power of the left leg in watts.","title":"pwr_w_l"},{"location":"Writing-Data.html#pwr_w_r","text":"Power of the right leg in watts.","title":"pwr_w_r"},{"location":"Writing-Data.html#writing-multiple-samples","text":"Post multiple samples at the same time by separating each sample with a new line. Examples: curl -u \"test:test1234\" 'https://your-domain.local/write?db=test&precision=s' \\ --data-binary 'samples hr_bpm=123,pwr_w=1234 1463683075 samples hr_bpm=111,pwr_w=999 1463683076 samples hr_bpm=99,pwr_w=456 1463683080'","title":"Writing multiple samples"}]}